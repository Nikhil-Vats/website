(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{491:function(n,t,e){"use strict";e.r(t);var o=e(0),i=Object(o.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("div",{staticClass:"jobs-diagram",staticStyle:{height:"280px"}}),n._v(" "),e("script",[n._v('\nconst gridSize = [8, 3];\nconst titlesAndURLs = [\n  ["", undefined],\n  ["", undefined],\n  ["", undefined],\n  ["", undefined],\n  ["Document Dataset", "/jobs/document-dataset/"],\n  ["", undefined],\n  ["Have a Data Hub", "/jobs/have-a-data-hub/"],\n  ["", undefined],\n  ["Find Datasets", "/jobs/find-datasets/"],\n  ["Pull Dataset", "/jobs/pull-dataset/"],\n  ["Version Dataset", "/jobs/version-dataset/"],\n  ["Validate Dataset", "/jobs/validate-dataset/"],\n  ["Pipeline\\nTransformations", "/jobs/pipeline-transformations/"],\n  ["Publish Dataset", "/jobs/publish-dataset/"],\n  ["Do Analysis &\\nMachine Learning", "/jobs/do-analysis-and-machine-learning/"],\n  ["Scale Scope", "/jobs/scale-scope/"],\n  ["Data Audit", "/jobs/data-audit/"],\n  ["Do Initial\\nData Exploration", "/jobs/do-initial-data-exploration/"],\n  ["Quickly\\nEdit Dataset", "/jobs/quickly-edit-dataset/"],\n  ["Store Dataset", "/jobs/store-dataset/"],\n  ["Data API", "/jobs/data-api/"],\n  ["Create\\nVisualization", "/jobs/create-visualization/"],\n  ["Orchestrate\\nData Platform", "/jobs/orchestrate-data-platform/"],\n  ["Scale Size", "/jobs/scale-size/"],\n  ["", undefined],\n  ["", undefined],\n  ["", undefined],\n  ["", undefined],\n  ["", undefined],\n  ["", undefined],\n  ["", undefined],\n  ["", undefined]\n];\nconst draw = SVG(document.body.querySelector(".jobs-diagram"));\nconst Hex = Honeycomb.extendHex({\n  size: 52,\n  orientation: "flat",\n  currentIndex() {\n    const position = this.toPoint();\n    const hexPos = Grid.pointToHex([position.x, position.y]);\n    return hexPos.x + 1 + (hexPos.y + 1) * gridSize[0];\n  },\n  render(draw) {\n    const { x, y } = this.toPoint();\n    const position = this.toPoint();\n    const centerPosition = this.center().add(position);\n    const hexPos = Grid.pointToHex([position.x, position.y]);\n    const corners = this.corners();\n    const index = this.currentIndex();\n    let stroke = { width: 1, color: "#999" };\n    if (titlesAndURLs[index][0] === "") {\n      stroke = {};\n    }\n    this.draw = draw\n      .polygon(corners.map(({ x, y }) => `${x},${y}`))\n      .fill("none")\n      .stroke(stroke)\n      .translate(x, y);\n    const fontSize = 10;\n    const title = titlesAndURLs[index][0];\n    const yPosition = title.includes("\\n")\n      ? centerPosition.y - fontSize * 2\n      : centerPosition.y - fontSize;\n    draw\n      .text(title)\n      .font({\n        size: fontSize,\n        anchor: "middle",\n        leading: 1.4,\n        fill: "#1A98FF"\n      })\n      .translate(centerPosition.x, yPosition);\n  },\n  openAnchor() {\n    const index = this.currentIndex();\n    if (titlesAndURLs[index][0] === "") {\n      return;\n    }\n    window.open(titlesAndURLs[index][1]);\n  },\n  highlight() {\n    const index = this.currentIndex();\n    if (titlesAndURLs[index][0] === "") {\n      return;\n    }\n    this.draw\n      .stop(true, true)\n      .fill({ opacity: 0.2, color: "#6a8bad" })\n      .animate(1000)\n      .fill({ opacity: 0, color: "none" });\n  }\n});\nconst Grid = Honeycomb.defineGrid(Hex);\nconst grid = Grid.rectangle({\n  width: gridSize[0],\n  height: gridSize[1],\n  onCreate(hex) {\n    hex.render(draw);\n  }\n});\ndocument.addEventListener("click", ({ offsetX, offsetY }) => {\n  const hexCoordinates = Grid.pointToHex([offsetX, offsetY]);\n  const hex = grid.get(hexCoordinates);\n  if (hex) {\n    hex.openAnchor();\n  }\n});\ndocument.addEventListener("mouseover", ({ offsetX, offsetY }) => {\n  const hexCoordinates = Grid.pointToHex([offsetX, offsetY]);\n  const hex = grid.get(hexCoordinates);\n  if (hex) {\n    hex.highlight();\n  }\n});\n')]),n._v(" "),e("h2",{attrs:{id:"examples"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#examples"}},[n._v("#")]),n._v(" Examples")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('for row in mydata:\n  if not validDate(row[0]):\n    log("Bad data:" + row[0]\n')])])]),e("h2",{attrs:{id:"solutions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#solutions"}},[n._v("#")]),n._v(" Solutions")]),n._v(" "),e("p",[e("strong",[n._v("Table Schema")]),e("br"),n._v("\nItâ€™s an implementation-agnostic way to declare a schema for tabular data.")]),n._v(" "),e("p",[e("strong",[n._v("GoodTables")]),e("br"),n._v("\nIt validates if a dataset complies to a Table Schema.")]),n._v(" "),e("p",[e("strong",[n._v("Data Quality Dashboard")]),e("br"),n._v("\nIt builds on top of GoodTables to provide a dashboard showing the state of multiple datasets.")])])}),[],!1,null,null,null);t.default=i.exports}}]);